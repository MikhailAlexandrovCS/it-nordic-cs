// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ORM_HomeWork.Data;

namespace ORM_HomeWork.Migrations
{
    [DbContext(typeof(CorrespondenceStorage))]
    partial class CorrespondenceStorageModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ORM_HomeWork.Domain.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Adress")
                        .IsRequired()
                        .HasColumnName("Address")
                        .HasColumnType("VARCHAR(50)");

                    b.Property<int>("FK_Address_CityId");

                    b.HasKey("Id");

                    b.HasIndex("FK_Address_CityId");

                    b.ToTable("Adress","dbo");
                });

            modelBuilder.Entity("ORM_HomeWork.Domain.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("Name")
                        .HasColumnType("VARCHAR(250)");

                    b.HasKey("Id");

                    b.HasAlternateKey("Name")
                        .HasName("UQ_City_Name");

                    b.ToTable("City","dbo");
                });

            modelBuilder.Entity("ORM_HomeWork.Domain.Contractor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FK_Contractor_PositionId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("Name")
                        .HasColumnType("VARCHAR(250)");

                    b.HasKey("Id");

                    b.HasIndex("FK_Contractor_PositionId");

                    b.ToTable("Contractor","dbo");
                });

            modelBuilder.Entity("ORM_HomeWork.Domain.Position", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("Name")
                        .HasColumnType("VARCHAR(250)");

                    b.HasKey("Id");

                    b.ToTable("Position","dbo");
                });

            modelBuilder.Entity("ORM_HomeWork.Domain.PostalItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("Name")
                        .HasColumnType("VARCHAR(250)");

                    b.Property<int>("NumberOfPages");

                    b.HasKey("Id");

                    b.ToTable("PostalItem","dbo");
                });

            modelBuilder.Entity("ORM_HomeWork.Domain.SendingStatus", b =>
                {
                    b.Property<int>("PostalItemId");

                    b.Property<DateTimeOffset>("UpdateStatusDateTime");

                    b.Property<int>("StatusId");

                    b.Property<int>("SendingContractorId");

                    b.Property<int>("SendingAdressId");

                    b.Property<int>("ReceivingContractorId");

                    b.Property<int>("ReceivingAdressId");

                    b.HasKey("PostalItemId", "UpdateStatusDateTime", "StatusId", "SendingContractorId", "SendingAdressId", "ReceivingContractorId", "ReceivingAdressId")
                        .HasName("PK_SendingStatus")
                        .HasAnnotation("SqlServer:Clustered", true);

                    b.HasIndex("ReceivingAdressId");

                    b.HasIndex("ReceivingContractorId");

                    b.HasIndex("SendingAdressId");

                    b.HasIndex("SendingContractorId");

                    b.HasIndex("StatusId");

                    b.ToTable("SendingStatus","dbo");
                });

            modelBuilder.Entity("ORM_HomeWork.Domain.Status", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("Name")
                        .HasColumnType("VARCHAR(20)");

                    b.HasKey("Id");

                    b.ToTable("Status","dbo");
                });

            modelBuilder.Entity("ORM_HomeWork.Domain.Address", b =>
                {
                    b.HasOne("ORM_HomeWork.Domain.City", "City")
                        .WithMany()
                        .HasForeignKey("FK_Address_CityId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ORM_HomeWork.Domain.Contractor", b =>
                {
                    b.HasOne("ORM_HomeWork.Domain.Position", "Position")
                        .WithMany()
                        .HasForeignKey("FK_Contractor_PositionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ORM_HomeWork.Domain.SendingStatus", b =>
                {
                    b.HasOne("ORM_HomeWork.Domain.PostalItem", "PostalItem")
                        .WithMany()
                        .HasForeignKey("PostalItemId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ORM_HomeWork.Domain.Address", "ReceivingAdress")
                        .WithMany()
                        .HasForeignKey("ReceivingAdressId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ORM_HomeWork.Domain.Contractor", "ReceivingContractor")
                        .WithMany()
                        .HasForeignKey("ReceivingContractorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ORM_HomeWork.Domain.Address", "SendingAdress")
                        .WithMany()
                        .HasForeignKey("SendingAdressId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ORM_HomeWork.Domain.Contractor", "SendingContractor")
                        .WithMany()
                        .HasForeignKey("SendingContractorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ORM_HomeWork.Domain.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
